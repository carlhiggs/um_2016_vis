:: Urban Monitor 
:: Interactive visualisation mock up notes - 20190312

:::: NOTES
::  shp file for the vegetation and land-use data; an excel file of the data with a pivot table set up; and the metadata.
::  Some key fields:
::  CompleteData_YN = Y (this filters out incomplete data coverage)
::  MUA_Ind         = 1 or 2 (this includes only land considered by state gov or ABS as urban).
::  PerAnyTree       (% tree cover (all veg over 3m)). I would stick with this vegetation measure and not worry about others for now.
::  MB_Reclass       (Land use code from ABS with the addition of our ‘infrastructure’ code, which is the street and rail corridors)
::  Public_Private (groups MB_Reclass into either Public, Private or Other. This is in the excel file, but not the shp file for some reason)

:: copy source modified mesh block (mmb) data from shape file to postgresql
:: Create database and postgis extension using psql
psql
CREATE DATABASE um_2016;

\c um_2016;
CREATE EXTENSION IF NOT EXISTS postgis;
SELECT postgis_full_version();
\q

:: Copy modified mesh block (mmb) data to Postgresql database
ogr2ogr -overwrite -progress -f "PostgreSQL" PG:"host=localhost port=5432 dbname=um_2016" D:/urban_monitor/SYD_for_Carl/MMB2016_Syd_UM2016_v4/MMB2016_Syd_UM2016_v4.shp -nln UM2016_v4_Syd -nlt PROMOTE_TO_MULTI -lco precision=NO

:: import ABS geometries to psql
:: (if we just union supplied geometries, the result is patchy --- e.g. missing streets etc as holes in LGA aggregation)
:: (so, for output we'll use usual SA1 and LGA geometries)
ogr2ogr -overwrite -progress -f "PostgreSQL" PG:"host=localhost port=5432 dbname=um_2016 " "D:/ABS/data/2016/1270055001_asgs_2016_vol_1_geopackage/ASGS 2016 Volume 1 Geopackage/ASGS 2016 Volume 1.gpkg" -lco geometry_name="geom"
ogr2ogr -overwrite -progress -f "PostgreSQL" PG:"host=localhost port=5432 dbname=um_2016 " "D:/ABS/data/2018/1270055003_asgs_2018_vol_3_aust_gpkg/ASGS 2018 Volume 3.gpkg" -lco geometry_name="geom"

:: Ensure geometry is valid  (not all were)
:: As per 
::    https://gis.stackexchange.com/questions/190296/how-to-deal-with-error-geosunaryunion-topologyexception-self-intersection
:: and
::    https://gis.stackexchange.com/questions/165151/postgis-update-multipolygon-with-st-makevalid-gives-error/165152
psql um_2016
UPDATE um2016_v4_syd SET wkb_geometry=ST_Multi(ST_CollectionExtract(ST_MakeValid(wkb_geometry),3)) WHERE NOT ST_isValid(wkb_geometry);
    
    
:: Create public private mmb lookup table in postgresql, and copy in data 
CREATE TABLE mmb_public_private 
(
mmb_code text,
public_private text
);

COPY mmb_public_private FROM 'D:/urban_monitor/SYD_for_Carl/mmb_public_private_lookup.csv' WITH DELIMITER ',' CSV HEADER;

-- Create smaller table with relevant fields, epsg 4326 geom and public private indicator
DROP TABLE IF EXISTS mmb_2016_pp_epsg4326;
CREATE TABLE mmb_2016_pp_epsg4326 AS
SELECT mmb_code       ,
       mb_code16      ,
       mb_cat16       ,
       sa1_main16     ,
       lga_code17,
       lga_name17     ,
       mb_reclass     ,
       mua_ind        ,
       peranytree     ,
       aranytree     ,
       fullarea,
       fularratio,
       compdatayn     ,
       public_private ,
       ST_Transform(wkb_geometry,4326) AS geom
FROM um2016_v4_syd
LEFT JOIN mmb_public_private USING (mmb_code);

-- Some geometry has validity issues:
UPDATE mmb_2016_pp_epsg4326 SET geom=ST_Multi(ST_CollectionExtract(ST_MakeValid(geom),3)) WHERE NOT ST_isValid(geom);
    
    
-- Create SA1 table
DROP TABLE IF EXISTS um_2016_pp_sa1_epsg4326;
CREATE TABLE um_2016_pp_sa1_epsg4326 AS
SELECT sa1_main16, 
       lga, 
       100.0 * a.aranytree_public /a.fullarea_sqm  AS peranytree_public,
       100.0 * a.aranytree_private/a.fullarea_sqm  AS peranytree_private,
       100.0 * a.aranytree_other /a.fullarea_sqm   AS peranytree_other,
       fullarea_sqm/10000.0 AS fullarea_ha,
       ST_Transform(abs.geom,4326) AS geom 
FROM
 (SELECT sa1_main16     ,
         string_agg(lga_name17,', ') AS lga,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Public') , 0) AS aranytree_public,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Private'), 0) AS aranytree_private,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Other')  , 0) AS aranytree_other,
         SUM(fullarea) AS fullarea_sqm
  FROM mmb_2016_pp_epsg4326
  WHERE fularratio > 0.9
  GROUP BY sa1_main16) a
LEFT JOIN  sa1_2016_aust_full abs ON a.sa1_main16 = abs.sa1_maincode_2016;

-- Create LGA table
DROP TABLE IF EXISTS um_2016_pp_lga_epsg4326;
CREATE TABLE um_2016_pp_lga_epsg4326 AS
SELECT '-'::text AS sa1_main16, 
       a.lga_name17 AS lga, 
       100.0 * a.aranytree_public /a.fullarea_sqm  AS peranytree_public,
       100.0 * a.aranytree_private/a.fullarea_sqm  AS peranytree_private,
       100.0 * a.aranytree_other /a.fullarea_sqm  AS  peranytree_other,
       fullarea_sqm/10000.0 AS fullarea_ha,
       ST_Transform(abs.geom,4326) AS geom 
FROM
 (SELECT lga_code17,
         lga_name17,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Public') , 0) AS aranytree_public,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Private'), 0) AS aranytree_private,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Other')  , 0) AS aranytree_other,
         SUM(fullarea) AS fullarea_sqm
  FROM mmb_2016_pp_epsg4326
  WHERE fularratio > 0.9
  GROUP BY lga_code17,lga_name17) a
LEFT JOIN  lga_2018_aust abs ON a.lga_code17 = abs.lga_code_2018;


-- Create overall summary table
DROP TABLE IF EXISTS um_2016_pp_overall;
CREATE TABLE um_2016_pp_overall AS
SELECT 'study_region'::text AS study_region,
       ROUND((100.0 * a.aranytree_public /a.fullarea_sqm)::numeric,2)  AS peranytree_public,
       ROUND((100.0 * a.aranytree_private/a.fullarea_sqm)::numeric,2)  AS peranytree_private,
       ROUND((100.0 * a.aranytree_other /a.fullarea_sqm )::numeric,2) AS  peranytree_other,
       (fullarea_sqm/10000.0)::int AS fullarea_ha
FROM
 (SELECT COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Public') , 0) AS aranytree_public,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Private'), 0) AS aranytree_private,
         COALESCE(SUM(aranytree) FILTER (WHERE public_private = 'Other')  , 0) AS aranytree_other,
         SUM(fullarea) AS fullarea_sqm
  FROM mmb_2016_pp_epsg4326
  WHERE fularratio > 0.9) a;

-- Create geojson tables (rounded statistics to 2 decimal places)
DROP TABLE IF EXISTS um_2016_pp_lga_geojson;
CREATE TABLE um_2016_pp_lga_geojson AS 
SELECT row_to_json(fc)
FROM (SELECT 'FeatureCollection' AS type, 
             array_to_json(array_agg(f)) AS features  
      FROM (SELECT 'Feature' AS type, 
                   ST_AsGeoJSON(geom)::json AS geometry, 
                   (SELECT row_to_json(_) 
                      FROM (SELECT sa1_main16, 
                                   lga, 
                                   ROUND(peranytree_public ::numeric,2) AS peranytree_public,
                                   ROUND(peranytree_private::numeric,2) AS peranytree_private,
                                   ROUND(peranytree_other  ::numeric,2) AS peranytree_other,
                                   ROUND((peranytree_public+peranytree_private+peranytree_other)::numeric,2) AS peranytree_total,
                                   fullarea_ha::int) as _) AS properties
            FROM um_2016_pp_lga_epsg4326) AS f) AS fc;

DROP TABLE IF EXISTS um_2016_pp_sa1_geojson;
CREATE TABLE um_2016_pp_sa1_geojson AS 
SELECT row_to_json(fc) 
FROM (SELECT 'FeatureCollection' AS type, 
             array_to_json(array_agg(f)) AS features  
      FROM (SELECT 'Feature' AS type, 
                   ST_AsGeoJSON(geom)::json AS geometry, 
                   (SELECT row_to_json(_) 
                      FROM (SELECT sa1_main16, 
                                   lga, 
                                   ROUND(peranytree_public ::numeric,2) AS peranytree_public,
                                   ROUND(peranytree_private::numeric,2) AS peranytree_private,
                                   ROUND(peranytree_other  ::numeric,2) AS peranytree_other,
                                   ROUND((peranytree_public+peranytree_private+peranytree_other)::numeric,2) AS peranytree_total,
                                   fullarea_ha::int
                                   ) as _) AS properties
            FROM um_2016_pp_sa1_epsg4326) AS f) AS fc;

-- Output geojson files            
COPY um_2016_pp_sa1_geojson TO 'D:/urban_monitor/um_2016_vis/um_2016_pp_sa1.geojson';
COPY um_2016_pp_lga_geojson TO 'D:/urban_monitor/um_2016_vis/um_2016_pp_lga.geojson';
COPY um_2016_pp_overall TO 'D:/urban_monitor/um_2016_vis/um_2016_pp_overall.csv' CSV DELIMITER ',' HEADER;

\q

:: Now, manually I uploaded the geojson files to a public drop box folder; can be accessed with link url
:: LGA: https://www.dropbox.com/s/eu7lfhc8dexujqb/um_2016_pp_lga.geojson?dl=1


:: copy features to a geopackage
ogr2ogr -overwrite -f GPKG D:/urban_monitor/um_2016_vis/um_2016_syd_pp.gpkg  PG:"host=localhost dbname=um_2016" "mmb_2016_pp_epsg4326" "um_2016_pp_lga_epsg4326" "um_2016_pp_sa1_epsg4326" 







aranytree
allarea  
areasqm  
fullarea